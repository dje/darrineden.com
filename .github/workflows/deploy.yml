name: 'Deployment'

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Delete Tweet Function
        run: cd aws/functions && make

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Format
        run: cd terraform && terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        run: cd terraform && terraform plan
        env:
          TF_VAR_honeycomb_api_key: ${{ secrets.HONEYCOMB_API_KEY }}
          TF_VAR_twitter_client_id: ${{ secrets.TWITTER_CLIENT_ID }}
          TF_VAR_twitter_client_secret: ${{ secrets.TWITTER_CLIENT_SECRET }}
          TF_VAR_twitter_access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TF_VAR_twitter_access_secret: ${{ secrets.TWITTER_ACCESS_SECRET }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: cd terraform && terraform apply -auto-approve
        env:
          TF_VAR_honeycomb_api_key: ${{ secrets.HONEYCOMB_API_KEY }}
          TF_VAR_twitter_client_id: ${{ secrets.TWITTER_CLIENT_ID }}
          TF_VAR_twitter_client_secret: ${{ secrets.TWITTER_CLIENT_SECRET }}
          TF_VAR_twitter_access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TF_VAR_twitter_access_secret: ${{ secrets.TWITTER_ACCESS_SECRET }}

      - name: Terraform CloudFront Distribution ID
        id: cfid
        run: cd terraform && terraform output cfdist

      - name: Build
        run: make build

      - name: AWS Directory Sync
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: aws s3 sync build s3://darrineden.com/ --delete --acl public-read

      - name: AWS Invalidate CloudFront Distribution
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: AWS_PAGER="" aws cloudfront create-invalidation --paths "/*" --distribution-id ${{ steps.cfid.outputs.stdout }}
